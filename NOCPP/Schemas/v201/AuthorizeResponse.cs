//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


#nullable enable


namespace NOCPP.Schemas.v201
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AuthorizeResponse_CustomDataType
    {

        [System.Text.Json.Serialization.JsonPropertyName("vendorId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string VendorId { get; set; } = default!;



        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// ID_ Token. Status. Authorization_ Status
    /// <br/>urn:x-oca:ocpp:uid:1:569372
    /// <br/>Current status of the ID Token.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum AuthorizeResponse_AuthorizationStatusEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Accepted")]
        Accepted = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Blocked")]
        Blocked = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"ConcurrentTx")]
        ConcurrentTx = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Expired")]
        Expired = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Invalid")]
        Invalid = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"NoCredit")]
        NoCredit = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"NotAllowedTypeEVSE")]
        NotAllowedTypeEVSE = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"NotAtThisLocation")]
        NotAtThisLocation = 7,


        [System.Runtime.Serialization.EnumMember(Value = @"NotAtThisTime")]
        NotAtThisTime = 8,


        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 9,


    }

    /// <summary>
    /// Certificate status information. 
    /// <br/>- if all certificates are valid: return 'Accepted'.
    /// <br/>- if one of the certificates was revoked, return 'CertificateRevoked'.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum AuthorizeResponse_AuthorizeCertificateStatusEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Accepted")]
        Accepted = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"SignatureError")]
        SignatureError = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"CertificateExpired")]
        CertificateExpired = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"CertificateRevoked")]
        CertificateRevoked = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"NoCertificateAvailable")]
        NoCertificateAvailable = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"CertChainError")]
        CertChainError = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"ContractCancelled")]
        ContractCancelled = 6,


    }

    /// <summary>
    /// Enumeration of possible idToken types.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum AuthorizeResponse_IdTokenEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Central")]
        Central = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"eMAID")]
        EMAID = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"ISO14443")]
        ISO14443 = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"ISO15693")]
        ISO15693 = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"KeyCode")]
        KeyCode = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Local")]
        Local = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"MacAddress")]
        MacAddress = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"NoAuthorization")]
        NoAuthorization = 7,


    }

    /// <summary>
    /// Message_ Content. Format. Message_ Format_ Code
    /// <br/>urn:x-enexis:ecdm:uid:1:570848
    /// <br/>Format of the message.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum AuthorizeResponse_MessageFormatEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASCII")]
        ASCII = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"HTML")]
        HTML = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"URI")]
        URI = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"UTF8")]
        UTF8 = 3,


    }

    /// <summary>
    /// Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AuthorizeResponse_AdditionalInfoType
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public AuthorizeResponse_CustomDataType CustomData { get; set; } = default!;

        /// <summary>
        /// This field specifies the additional IdToken.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("additionalIdToken")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string AdditionalIdToken { get; set; } = default!;

        /// <summary>
        /// This defines the type of the additionalIdToken. This is a custom type, so the implementation needs to be agreed upon by all involved parties.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Type { get; set; } = default!;


    }

    /// <summary>
    /// ID_ Token
    /// <br/>urn:x-oca:ocpp:uid:2:233247
    /// <br/>Contains status information about an identifier.
    /// <br/>It is advised to not stop charging for a token that expires during charging, as ExpiryDate is only used for caching purposes. If ExpiryDate is not given, the status has no end date.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AuthorizeResponse_IdTokenInfoType
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public AuthorizeResponse_CustomDataType CustomData { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AuthorizeResponse_AuthorizationStatusEnumType Status { get; set; } = default!;

        /// <summary>
        /// ID_ Token. Expiry. Date_ Time
        /// <br/>urn:x-oca:ocpp:uid:1:569373
        /// <br/>Date and Time after which the token must be considered invalid.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cacheExpiryDateTime")]
        public System.DateTimeOffset CacheExpiryDateTime { get; set; } = default!;

        /// <summary>
        /// Priority from a business point of view. Default priority is 0, The range is from -9 to 9. Higher values indicate a higher priority. The chargingPriority in &amp;lt;&amp;lt;transactioneventresponse,TransactionEventResponse&amp;gt;&amp;gt; overrules this one. 
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("chargingPriority")]
        public int ChargingPriority { get; set; } = default!;

        /// <summary>
        /// ID_ Token. Language1. Language_ Code
        /// <br/>urn:x-oca:ocpp:uid:1:569374
        /// <br/>Preferred user interface language of identifier user. Contains a language code as defined in &amp;lt;&amp;lt;ref-RFC5646,[RFC5646]&amp;gt;&amp;gt;.
        /// <br/>
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("language1")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string Language1 { get; set; } = default!;

        /// <summary>
        /// Only used when the IdToken is only valid for one or more specific EVSEs, not for the entire Charging Station.
        /// <br/>
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("evseId")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<int> EvseId { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("groupIdToken")]
        public AuthorizeResponse_IdTokenType GroupIdToken { get; set; } = default!;

        /// <summary>
        /// ID_ Token. Language2. Language_ Code
        /// <br/>urn:x-oca:ocpp:uid:1:569375
        /// <br/>Second preferred user interface language of identifier user. Don’t use when language1 is omitted, has to be different from language1. Contains a language code as defined in &amp;lt;&amp;lt;ref-RFC5646,[RFC5646]&amp;gt;&amp;gt;.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("language2")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string Language2 { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("personalMessage")]
        public AuthorizeResponse_MessageContentType PersonalMessage { get; set; } = default!;


    }

    /// <summary>
    /// Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AuthorizeResponse_IdTokenType
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public AuthorizeResponse_CustomDataType CustomData { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("additionalInfo")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<AuthorizeResponse_AdditionalInfoType> AdditionalInfo { get; set; } = default!;

        /// <summary>
        /// IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can for example also contain a UUID.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idToken")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string IdToken { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AuthorizeResponse_IdTokenEnumType Type { get; set; } = default!;


    }

    /// <summary>
    /// Message_ Content
    /// <br/>urn:x-enexis:ecdm:uid:2:234490
    /// <br/>Contains message details, for a message to be displayed on a Charging Station.
    /// <br/>
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AuthorizeResponse_MessageContentType
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public AuthorizeResponse_CustomDataType CustomData { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("format")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AuthorizeResponse_MessageFormatEnumType Format { get; set; } = default!;

        /// <summary>
        /// Message_ Content. Language. Language_ Code
        /// <br/>urn:x-enexis:ecdm:uid:1:570849
        /// <br/>Message language identifier. Contains a language code as defined in &amp;lt;&amp;lt;ref-RFC5646,[RFC5646]&amp;gt;&amp;gt;.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string Language { get; set; } = default!;

        /// <summary>
        /// Message_ Content. Content. Message
        /// <br/>urn:x-enexis:ecdm:uid:1:570852
        /// <br/>Message contents.
        /// <br/>
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("content")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Content { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AuthorizeResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public AuthorizeResponse_CustomDataType CustomData { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("idTokenInfo")]
        [System.ComponentModel.DataAnnotations.Required]
        public AuthorizeResponse_IdTokenInfoType IdTokenInfo { get; set; } = new AuthorizeResponse_IdTokenInfoType();


        [System.Text.Json.Serialization.JsonPropertyName("certificateStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AuthorizeResponse_AuthorizeCertificateStatusEnumType CertificateStatus { get; set; } = default!;


    }
}