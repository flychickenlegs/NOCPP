//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


#nullable enable


namespace NOCPP.Schemas.v201
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NotifyEventRequest_CustomDataType
    {

        [System.Text.Json.Serialization.JsonPropertyName("vendorId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string VendorId { get; set; } = default!;



        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the event notification type of the message.
    /// <br/>
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum NotifyEventRequest_EventNotificationEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HardWiredNotification")]
        HardWiredNotification = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"HardWiredMonitor")]
        HardWiredMonitor = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"PreconfiguredMonitor")]
        PreconfiguredMonitor = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"CustomMonitor")]
        CustomMonitor = 3,


    }

    /// <summary>
    /// Type of monitor that triggered this event, e.g. exceeding a threshold value.
    /// <br/>
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum NotifyEventRequest_EventTriggerEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Alerting")]
        Alerting = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Delta")]
        Delta = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Periodic")]
        Periodic = 2,


    }

    /// <summary>
    /// A physical or logical component
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NotifyEventRequest_ComponentType
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public NotifyEventRequest_CustomDataType CustomData { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("evse")]
        public NotifyEventRequest_EVSEType Evse { get; set; } = default!;

        /// <summary>
        /// Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("instance")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Instance { get; set; } = default!;


    }

    /// <summary>
    /// Class to report an event notification for a component-variable.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NotifyEventRequest_EventDataType
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public NotifyEventRequest_CustomDataType CustomData { get; set; } = default!;

        /// <summary>
        /// Identifies the event. This field can be referred to as a cause by other events.
        /// <br/>
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eventId")]
        public int EventId { get; set; } = default!;

        /// <summary>
        /// Timestamp of the moment the report was generated.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("trigger")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NotifyEventRequest_EventTriggerEnumType Trigger { get; set; } = default!;

        /// <summary>
        /// Refers to the Id of an event that is considered to be the cause for this event.
        /// <br/>
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cause")]
        public int Cause { get; set; } = default!;

        /// <summary>
        /// Actual value (_attributeType_ Actual) of the variable.
        /// <br/>
        /// <br/>The Configuration Variable &amp;lt;&amp;lt;configkey-reporting-value-size,ReportingValueSize&amp;gt;&amp;gt; can be used to limit GetVariableResult.attributeValue, VariableAttribute.value and EventData.actualValue. The max size of these values will always remain equal. 
        /// <br/>
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("actualValue")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2500)]
        public string ActualValue { get; set; } = default!;

        /// <summary>
        /// Technical (error) code as reported by component.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("techCode")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string TechCode { get; set; } = default!;

        /// <summary>
        /// Technical detail information as reported by component.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("techInfo")]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string TechInfo { get; set; } = default!;

        /// <summary>
        /// _Cleared_ is set to true to report the clearing of a monitored situation, i.e. a 'return to normal'. 
        /// <br/>
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cleared")]
        public bool Cleared { get; set; } = default!;

        /// <summary>
        /// If an event notification is linked to a specific transaction, this field can be used to specify its transactionId.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TransactionId { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("component")]
        [System.ComponentModel.DataAnnotations.Required]
        public NotifyEventRequest_ComponentType Component { get; set; } = new NotifyEventRequest_ComponentType();

        /// <summary>
        /// Identifies the VariableMonitoring which triggered the event.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("variableMonitoringId")]
        public int VariableMonitoringId { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("eventNotificationType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NotifyEventRequest_EventNotificationEnumType EventNotificationType { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("variable")]
        [System.ComponentModel.DataAnnotations.Required]
        public NotifyEventRequest_VariableType Variable { get; set; } = new NotifyEventRequest_VariableType();


    }

    /// <summary>
    /// EVSE
    /// <br/>urn:x-oca:ocpp:uid:2:233123
    /// <br/>Electric Vehicle Supply Equipment
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NotifyEventRequest_EVSEType
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public NotifyEventRequest_CustomDataType CustomData { get; set; } = default!;

        /// <summary>
        /// Identified_ Object. MRID. Numeric_ Identifier
        /// <br/>urn:x-enexis:ecdm:uid:1:569198
        /// <br/>EVSE Identifier. This contains a number (&amp;gt; 0) designating an EVSE of the Charging Station.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        /// <summary>
        /// An id to designate a specific connector (on an EVSE) by connector index number.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        public int ConnectorId { get; set; } = default!;


    }

    /// <summary>
    /// Reference key to a component-variable.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NotifyEventRequest_VariableType
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public NotifyEventRequest_CustomDataType CustomData { get; set; } = default!;

        /// <summary>
        /// Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("instance")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Instance { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NotifyEventRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public NotifyEventRequest_CustomDataType CustomData { get; set; } = default!;

        /// <summary>
        /// Timestamp of the moment this message was generated at the Charging Station.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("generatedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset GeneratedAt { get; set; } = default!;

        /// <summary>
        /// “to be continued” indicator. Indicates whether another part of the report follows in an upcoming notifyEventRequest message. Default value when omitted is false. 
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tbc")]
        public bool Tbc { get; set; } = false;

        /// <summary>
        /// Sequence number of this message. First message starts at 0.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("seqNo")]
        public int SeqNo { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("eventData")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<NotifyEventRequest_EventDataType> EventData { get; set; } = new System.Collections.ObjectModel.Collection<NotifyEventRequest_EventDataType>();


    }
}