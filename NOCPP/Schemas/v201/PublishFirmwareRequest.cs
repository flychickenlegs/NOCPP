//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


#nullable enable


namespace NOCPP.Schemas.v201
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PublishFirmwareRequest_CustomDataType
    {

        [System.Text.Json.Serialization.JsonPropertyName("vendorId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string VendorId { get; set; } = default!;



        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PublishFirmwareRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public PublishFirmwareRequest_CustomDataType CustomData { get; set; } = default!;

        /// <summary>
        /// This contains a string containing a URI pointing to a
        /// <br/>location from which to retrieve the firmware.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Location { get; set; } = default!;

        /// <summary>
        /// This specifies how many times Charging Station must try
        /// <br/>to download the firmware before giving up. If this field is not
        /// <br/>present, it is left to Charging Station to decide how many times it wants to retry.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("retries")]
        public int Retries { get; set; } = default!;

        /// <summary>
        /// The MD5 checksum over the entire firmware file as a hexadecimal string of length 32. 
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("checksum")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Checksum { get; set; } = default!;

        /// <summary>
        /// The Id of the request.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("requestId")]
        public int RequestId { get; set; } = default!;

        /// <summary>
        /// The interval in seconds
        /// <br/>after which a retry may be
        /// <br/>attempted. If this field is not
        /// <br/>present, it is left to Charging
        /// <br/>Station to decide how long to wait
        /// <br/>between attempts.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("retryInterval")]
        public int RetryInterval { get; set; } = default!;


    }
}