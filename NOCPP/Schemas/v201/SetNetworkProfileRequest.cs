//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


#nullable enable


namespace NOCPP.Schemas.v201
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SetNetworkProfileRequest_CustomDataType
    {

        [System.Text.Json.Serialization.JsonPropertyName("vendorId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string VendorId { get; set; } = default!;



        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// APN. APN_ Authentication. APN_ Authentication_ Code
    /// <br/>urn:x-oca:ocpp:uid:1:568828
    /// <br/>Authentication method.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SetNetworkProfileRequest_APNAuthenticationEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CHAP")]
        CHAP = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"PAP")]
        PAP = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"AUTO")]
        AUTO = 3,


    }

    /// <summary>
    /// Applicable Network Interface.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SetNetworkProfileRequest_OCPPInterfaceEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Wired0")]
        Wired0 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Wired1")]
        Wired1 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Wired2")]
        Wired2 = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Wired3")]
        Wired3 = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Wireless0")]
        Wireless0 = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Wireless1")]
        Wireless1 = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Wireless2")]
        Wireless2 = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Wireless3")]
        Wireless3 = 7,


    }

    /// <summary>
    /// Communication_ Function. OCPP_ Transport. OCPP_ Transport_ Code
    /// <br/>urn:x-oca:ocpp:uid:1:569356
    /// <br/>Defines the transport protocol (e.g. SOAP or JSON). Note: SOAP is not supported in OCPP 2.0, but is supported by other versions of OCPP.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SetNetworkProfileRequest_OCPPTransportEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"JSON")]
        JSON = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"SOAP")]
        SOAP = 1,


    }

    /// <summary>
    /// Communication_ Function. OCPP_ Version. OCPP_ Version_ Code
    /// <br/>urn:x-oca:ocpp:uid:1:569355
    /// <br/>Defines the OCPP version used for this communication function.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SetNetworkProfileRequest_OCPPVersionEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OCPP12")]
        OCPP12 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"OCPP15")]
        OCPP15 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"OCPP16")]
        OCPP16 = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"OCPP20")]
        OCPP20 = 3,


    }

    /// <summary>
    /// VPN. Type. VPN_ Code
    /// <br/>urn:x-oca:ocpp:uid:1:569277
    /// <br/>Type of VPN
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SetNetworkProfileRequest_VPNEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IKEv2")]
        IKEv2 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"IPSec")]
        IPSec = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"L2TP")]
        L2TP = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"PPTP")]
        PPTP = 3,


    }

    /// <summary>
    /// APN
    /// <br/>urn:x-oca:ocpp:uid:2:233134
    /// <br/>Collection of configuration data needed to make a data-connection over a cellular network.
    /// <br/>
    /// <br/>NOTE: When asking a GSM modem to dial in, it is possible to specify which mobile operator should be used. This can be done with the mobile country code (MCC) in combination with a mobile network code (MNC). Example: If your preferred network is Vodafone Netherlands, the MCC=204 and the MNC=04 which means the key PreferredNetwork = 20404 Some modems allows to specify a preferred network, which means, if this network is not available, a different network is used. If you specify UseOnlyPreferredNetwork and this network is not available, the modem will not dial in.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SetNetworkProfileRequest_APNType
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public SetNetworkProfileRequest_CustomDataType CustomData { get; set; } = default!;

        /// <summary>
        /// APN. APN. URI
        /// <br/>urn:x-oca:ocpp:uid:1:568814
        /// <br/>The Access Point Name as an URL.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("apn")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Apn { get; set; } = default!;

        /// <summary>
        /// APN. APN. User_ Name
        /// <br/>urn:x-oca:ocpp:uid:1:568818
        /// <br/>APN username.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("apnUserName")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ApnUserName { get; set; } = default!;

        /// <summary>
        /// APN. APN. Password
        /// <br/>urn:x-oca:ocpp:uid:1:568819
        /// <br/>APN Password.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("apnPassword")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ApnPassword { get; set; } = default!;

        /// <summary>
        /// APN. SIMPIN. PIN_ Code
        /// <br/>urn:x-oca:ocpp:uid:1:568821
        /// <br/>SIM card pin code.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("simPin")]
        public int SimPin { get; set; } = default!;

        /// <summary>
        /// APN. Preferred_ Network. Mobile_ Network_ ID
        /// <br/>urn:x-oca:ocpp:uid:1:568822
        /// <br/>Preferred network, written as MCC and MNC concatenated. See note.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("preferredNetwork")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string PreferredNetwork { get; set; } = default!;

        /// <summary>
        /// APN. Use_ Only_ Preferred_ Network. Indicator
        /// <br/>urn:x-oca:ocpp:uid:1:568824
        /// <br/>Default: false. Use only the preferred Network, do
        /// <br/>not dial in when not available. See Note.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("useOnlyPreferredNetwork")]
        public bool UseOnlyPreferredNetwork { get; set; } = false;


        [System.Text.Json.Serialization.JsonPropertyName("apnAuthentication")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SetNetworkProfileRequest_APNAuthenticationEnumType ApnAuthentication { get; set; } = default!;


    }

    /// <summary>
    /// Communication_ Function
    /// <br/>urn:x-oca:ocpp:uid:2:233304
    /// <br/>The NetworkConnectionProfile defines the functional and technical parameters of a communication link.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SetNetworkProfileRequest_NetworkConnectionProfileType
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public SetNetworkProfileRequest_CustomDataType CustomData { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("apn")]
        public SetNetworkProfileRequest_APNType Apn { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("ocppVersion")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SetNetworkProfileRequest_OCPPVersionEnumType OcppVersion { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("ocppTransport")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SetNetworkProfileRequest_OCPPTransportEnumType OcppTransport { get; set; } = default!;

        /// <summary>
        /// Communication_ Function. OCPP_ Central_ System_ URL. URI
        /// <br/>urn:x-oca:ocpp:uid:1:569357
        /// <br/>URL of the CSMS(s) that this Charging Station  communicates with.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ocppCsmsUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string OcppCsmsUrl { get; set; } = default!;

        /// <summary>
        /// Duration in seconds before a message send by the Charging Station via this network connection times-out.
        /// <br/>The best setting depends on the underlying network and response times of the CSMS.
        /// <br/>If you are looking for a some guideline: use 30 seconds as a starting point.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("messageTimeout")]
        public int MessageTimeout { get; set; } = default!;

        /// <summary>
        /// This field specifies the security profile used when connecting to the CSMS with this NetworkConnectionProfile.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("securityProfile")]
        public int SecurityProfile { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("ocppInterface")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SetNetworkProfileRequest_OCPPInterfaceEnumType OcppInterface { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("vpn")]
        public SetNetworkProfileRequest_VPNType Vpn { get; set; } = default!;


    }

    /// <summary>
    /// VPN
    /// <br/>urn:x-oca:ocpp:uid:2:233268
    /// <br/>VPN Configuration settings
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SetNetworkProfileRequest_VPNType
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public SetNetworkProfileRequest_CustomDataType CustomData { get; set; } = default!;

        /// <summary>
        /// VPN. Server. URI
        /// <br/>urn:x-oca:ocpp:uid:1:569272
        /// <br/>VPN Server Address
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("server")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Server { get; set; } = default!;

        /// <summary>
        /// VPN. User. User_ Name
        /// <br/>urn:x-oca:ocpp:uid:1:569273
        /// <br/>VPN User
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("user")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string User { get; set; } = default!;

        /// <summary>
        /// VPN. Group. Group_ Name
        /// <br/>urn:x-oca:ocpp:uid:1:569274
        /// <br/>VPN group.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("group")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Group { get; set; } = default!;

        /// <summary>
        /// VPN. Password. Password
        /// <br/>urn:x-oca:ocpp:uid:1:569275
        /// <br/>VPN Password.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Password { get; set; } = default!;

        /// <summary>
        /// VPN. Key. VPN_ Key
        /// <br/>urn:x-oca:ocpp:uid:1:569276
        /// <br/>VPN shared secret.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Key { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SetNetworkProfileRequest_VPNEnumType Type { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SetNetworkProfileRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public SetNetworkProfileRequest_CustomDataType CustomData { get; set; } = default!;

        /// <summary>
        /// Slot in which the configuration should be stored.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("configurationSlot")]
        public int ConfigurationSlot { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("connectionData")]
        [System.ComponentModel.DataAnnotations.Required]
        public SetNetworkProfileRequest_NetworkConnectionProfileType ConnectionData { get; set; } = new SetNetworkProfileRequest_NetworkConnectionProfileType();


    }
}