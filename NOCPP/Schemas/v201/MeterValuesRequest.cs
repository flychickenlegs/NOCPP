//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


#nullable enable


namespace NOCPP.Schemas.v201
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MeterValuesRequest_CustomDataType
    {

        [System.Text.Json.Serialization.JsonPropertyName("vendorId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string VendorId { get; set; } = default!;



        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Sampled_ Value. Location. Location_ Code
    /// <br/>urn:x-oca:ocpp:uid:1:569265
    /// <br/>Indicates where the measured value has been sampled. Default =  "Outlet"
    /// <br/>
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum MeterValuesRequest_LocationEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Body")]
        Body = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Cable")]
        Cable = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"EV")]
        EV = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Inlet")]
        Inlet = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Outlet")]
        Outlet = 4,


    }

    /// <summary>
    /// Sampled_ Value. Measurand. Measurand_ Code
    /// <br/>urn:x-oca:ocpp:uid:1:569263
    /// <br/>Type of measurement. Default = "Energy.Active.Import.Register"
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum MeterValuesRequest_MeasurandEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Current.Export")]
        Current_Export = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Current.Import")]
        Current_Import = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Current.Offered")]
        Current_Offered = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Energy.Active.Export.Register")]
        Energy_Active_Export_Register = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Energy.Active.Import.Register")]
        Energy_Active_Import_Register = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Energy.Reactive.Export.Register")]
        Energy_Reactive_Export_Register = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Energy.Reactive.Import.Register")]
        Energy_Reactive_Import_Register = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Energy.Active.Export.Interval")]
        Energy_Active_Export_Interval = 7,


        [System.Runtime.Serialization.EnumMember(Value = @"Energy.Active.Import.Interval")]
        Energy_Active_Import_Interval = 8,


        [System.Runtime.Serialization.EnumMember(Value = @"Energy.Active.Net")]
        Energy_Active_Net = 9,


        [System.Runtime.Serialization.EnumMember(Value = @"Energy.Reactive.Export.Interval")]
        Energy_Reactive_Export_Interval = 10,


        [System.Runtime.Serialization.EnumMember(Value = @"Energy.Reactive.Import.Interval")]
        Energy_Reactive_Import_Interval = 11,


        [System.Runtime.Serialization.EnumMember(Value = @"Energy.Reactive.Net")]
        Energy_Reactive_Net = 12,


        [System.Runtime.Serialization.EnumMember(Value = @"Energy.Apparent.Net")]
        Energy_Apparent_Net = 13,


        [System.Runtime.Serialization.EnumMember(Value = @"Energy.Apparent.Import")]
        Energy_Apparent_Import = 14,


        [System.Runtime.Serialization.EnumMember(Value = @"Energy.Apparent.Export")]
        Energy_Apparent_Export = 15,


        [System.Runtime.Serialization.EnumMember(Value = @"Frequency")]
        Frequency = 16,


        [System.Runtime.Serialization.EnumMember(Value = @"Power.Active.Export")]
        Power_Active_Export = 17,


        [System.Runtime.Serialization.EnumMember(Value = @"Power.Active.Import")]
        Power_Active_Import = 18,


        [System.Runtime.Serialization.EnumMember(Value = @"Power.Factor")]
        Power_Factor = 19,


        [System.Runtime.Serialization.EnumMember(Value = @"Power.Offered")]
        Power_Offered = 20,


        [System.Runtime.Serialization.EnumMember(Value = @"Power.Reactive.Export")]
        Power_Reactive_Export = 21,


        [System.Runtime.Serialization.EnumMember(Value = @"Power.Reactive.Import")]
        Power_Reactive_Import = 22,


        [System.Runtime.Serialization.EnumMember(Value = @"SoC")]
        SoC = 23,


        [System.Runtime.Serialization.EnumMember(Value = @"Voltage")]
        Voltage = 24,


    }

    /// <summary>
    /// Sampled_ Value. Phase. Phase_ Code
    /// <br/>urn:x-oca:ocpp:uid:1:569264
    /// <br/>Indicates how the measured value is to be interpreted. For instance between L1 and neutral (L1-N) Please note that not all values of phase are applicable to all Measurands. When phase is absent, the measured value is interpreted as an overall value.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum MeterValuesRequest_PhaseEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"L1")]
        L1 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"L2")]
        L2 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"L3")]
        L3 = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"L1-N")]
        L1N = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"L2-N")]
        L2N = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"L3-N")]
        L3N = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"L1-L2")]
        L1L2 = 7,


        [System.Runtime.Serialization.EnumMember(Value = @"L2-L3")]
        L2L3 = 8,


        [System.Runtime.Serialization.EnumMember(Value = @"L3-L1")]
        L3L1 = 9,


    }

    /// <summary>
    /// Sampled_ Value. Context. Reading_ Context_ Code
    /// <br/>urn:x-oca:ocpp:uid:1:569261
    /// <br/>Type of detail value: start, end or sample. Default = "Sample.Periodic"
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum MeterValuesRequest_ReadingContextEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Interruption.Begin")]
        Interruption_Begin = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Interruption.End")]
        Interruption_End = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Sample.Clock")]
        Sample_Clock = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Sample.Periodic")]
        Sample_Periodic = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Transaction.Begin")]
        Transaction_Begin = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Transaction.End")]
        Transaction_End = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Trigger")]
        Trigger = 7,


    }

    /// <summary>
    /// Meter_ Value
    /// <br/>urn:x-oca:ocpp:uid:2:233265
    /// <br/>Collection of one or more sampled values in MeterValuesRequest and TransactionEvent. All sampled values in a MeterValue are sampled at the same point in time.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MeterValuesRequest_MeterValueType
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public MeterValuesRequest_CustomDataType CustomData { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("sampledValue")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<MeterValuesRequest_SampledValueType> SampledValue { get; set; } = new System.Collections.ObjectModel.Collection<MeterValuesRequest_SampledValueType>();

        /// <summary>
        /// Meter_ Value. Timestamp. Date_ Time
        /// <br/>urn:x-oca:ocpp:uid:1:569259
        /// <br/>Timestamp for measured value(s).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; } = default!;


    }

    /// <summary>
    /// Sampled_ Value
    /// <br/>urn:x-oca:ocpp:uid:2:233266
    /// <br/>Single sampled value in MeterValues. Each value can be accompanied by optional fields.
    /// <br/>
    /// <br/>To save on mobile data usage, default values of all of the optional fields are such that. The value without any additional fields will be interpreted, as a register reading of active import energy in Wh (Watt-hour) units.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MeterValuesRequest_SampledValueType
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public MeterValuesRequest_CustomDataType CustomData { get; set; } = default!;

        /// <summary>
        /// Sampled_ Value. Value. Measure
        /// <br/>urn:x-oca:ocpp:uid:1:569260
        /// <br/>Indicates the measured value.
        /// <br/>
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public double Value { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("context")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MeterValuesRequest_ReadingContextEnumType Context { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("measurand")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MeterValuesRequest_MeasurandEnumType Measurand { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("phase")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MeterValuesRequest_PhaseEnumType Phase { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("location")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MeterValuesRequest_LocationEnumType Location { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("signedMeterValue")]
        public MeterValuesRequest_SignedMeterValueType SignedMeterValue { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public MeterValuesRequest_UnitOfMeasureType UnitOfMeasure { get; set; } = default!;


    }

    /// <summary>
    /// Represent a signed version of the meter value.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MeterValuesRequest_SignedMeterValueType
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public MeterValuesRequest_CustomDataType CustomData { get; set; } = default!;

        /// <summary>
        /// Base64 encoded, contains the signed data which might contain more then just the meter value. It can contain information like timestamps, reference to a customer etc.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("signedMeterData")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2500)]
        public string SignedMeterData { get; set; } = default!;

        /// <summary>
        /// Method used to create the digital signature.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("signingMethod")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string SigningMethod { get; set; } = default!;

        /// <summary>
        /// Method used to encode the meter values before applying the digital signature algorithm.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("encodingMethod")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string EncodingMethod { get; set; } = default!;

        /// <summary>
        /// Base64 encoded, sending depends on configuration variable _PublicKeyWithSignedMeterValue_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("publicKey")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2500)]
        public string PublicKey { get; set; } = default!;


    }

    /// <summary>
    /// Represents a UnitOfMeasure with a multiplier
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MeterValuesRequest_UnitOfMeasureType
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public MeterValuesRequest_CustomDataType CustomData { get; set; } = default!;

        /// <summary>
        /// Unit of the value. Default = "Wh" if the (default) measurand is an "Energy" type.
        /// <br/>This field SHALL use a value from the list Standardized Units of Measurements in Part 2 Appendices. 
        /// <br/>If an applicable unit is available in that list, otherwise a "custom" unit might be used.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Unit { get; set; } = "Wh";

        /// <summary>
        /// Multiplier, this value represents the exponent to base 10. I.e. multiplier 3 means 10 raised to the 3rd power. Default is 0.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("multiplier")]
        public int Multiplier { get; set; } = 0;


    }

    /// <summary>
    /// Request_ Body
    /// <br/>urn:x-enexis:ecdm:uid:2:234744
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MeterValuesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public MeterValuesRequest_CustomDataType CustomData { get; set; } = default!;

        /// <summary>
        /// Request_ Body. EVSEID. Numeric_ Identifier
        /// <br/>urn:x-enexis:ecdm:uid:1:571101
        /// <br/>This contains a number (&amp;gt;0) designating an EVSE of the Charging Station. ‘0’ (zero) is used to designate the main power meter.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("evseId")]
        public int EvseId { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("meterValue")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<MeterValuesRequest_MeterValueType> MeterValue { get; set; } = new System.Collections.ObjectModel.Collection<MeterValuesRequest_MeterValueType>();


    }
}