//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


#nullable enable


namespace NOCPP.Schemas.v201
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PublishFirmwareStatusNotificationRequest_CustomDataType
    {

        [System.Text.Json.Serialization.JsonPropertyName("vendorId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string VendorId { get; set; } = default!;



        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This contains the progress status of the publishfirmware
    /// <br/>installation.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum PublishFirmwareStatusNotificationRequest_PublishFirmwareStatusEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Idle")]
        Idle = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"DownloadScheduled")]
        DownloadScheduled = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Downloading")]
        Downloading = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Downloaded")]
        Downloaded = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Published")]
        Published = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"DownloadFailed")]
        DownloadFailed = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"DownloadPaused")]
        DownloadPaused = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"InvalidChecksum")]
        InvalidChecksum = 7,


        [System.Runtime.Serialization.EnumMember(Value = @"ChecksumVerified")]
        ChecksumVerified = 8,


        [System.Runtime.Serialization.EnumMember(Value = @"PublishFailed")]
        PublishFailed = 9,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PublishFirmwareStatusNotificationRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("customData")]
        public PublishFirmwareStatusNotificationRequest_CustomDataType CustomData { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PublishFirmwareStatusNotificationRequest_PublishFirmwareStatusEnumType Status { get; set; } = default!;

        /// <summary>
        /// Required if status is Published. Can be multiple URIâ€™s, if the Local Controller supports e.g. HTTP, HTTPS, and FTP.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Location { get; set; } = default!;

        /// <summary>
        /// The request id that was
        /// <br/>provided in the
        /// <br/>PublishFirmwareRequest which
        /// <br/>triggered this action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("requestId")]
        public int RequestId { get; set; } = default!;


    }
}